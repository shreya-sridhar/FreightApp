{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shrey\\\\FreightApp\\\\components\\\\FindPlaces.js\";\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport DateTime from 'C:/Users/shrey/FreightApp/components/DateTime.js';\n\nfunction GooglePlacesInput(props) {\n  var _this = this;\n\n  var homePlace = {\n    description: 'Home',\n    geometry: {\n      location: {\n        lat: 48.8152937,\n        lng: 2.4597668\n      }\n    }\n  };\n  var workPlace = {\n    description: 'Work',\n    geometry: {\n      location: {\n        lat: 48.8496818,\n        lng: 2.2940881\n      }\n    }\n  };\n  var currentLocation = {\n    description: 'currentLocation',\n    geometry: {\n      location: {\n        lat: props.latitude,\n        lng: props.longitude\n      }\n    }\n  };\n  return React.createElement(React.Fragment, null, React.createElement(GooglePlacesAutocomplete, {\n    placeholder: \"Enter Pickup Location\",\n    minLength: 2,\n    autoFocus: false,\n    returnKeyType: 'search',\n    keyboardAppearance: 'light',\n    listViewDisplayed: \"auto\",\n    fetchDetails: true,\n    renderDescription: function renderDescription(row) {\n      return row.description;\n    },\n    onPress: function onPress(data) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      props.setOrigin(data, details);\n      console.log(data.place_id);\n    },\n    getDefaultValue: function getDefaultValue() {\n      return '';\n    },\n    query: {\n      key: 'AIzaSyC0UZckU_eK8heofiWpXTUYU-IpJo0KhnI',\n      language: 'en',\n      types: '(cities)'\n    },\n    styles: {\n      textInputContainer: {\n        width: '100%'\n      },\n      description: {\n        fontWeight: 'bold'\n      },\n      predefinedPlacesDescription: {\n        color: '#1faadb'\n      }\n    },\n    currentLocation: true,\n    currentLocationLabel: \"Current location\",\n    nearbyPlacesAPI: \"GooglePlacesSearch\",\n    GoogleReverseGeocodingQuery: {},\n    GooglePlacesDetailsQuery: {\n      fields: 'formatted_address'\n    },\n    predefinedPlaces: [homePlace, workPlace],\n    debounce: 200,\n    renderLeftButton: function renderLeftButton() {\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 31\n        }\n      }, \"From?\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }), React.createElement(GooglePlacesAutocomplete, {\n    placeholder: \"Enter Dropoff Location\",\n    minLength: 2,\n    autoFocus: false,\n    returnKeyType: 'search',\n    keyboardAppearance: 'light',\n    listViewDisplayed: \"auto\",\n    fetchDetails: true,\n    renderDescription: function renderDescription(row) {\n      return row.description;\n    },\n    onPress: function onPress(data) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      props.setDestination(data, details);\n      console.log(data.place_id);\n    },\n    getDefaultValue: function getDefaultValue() {\n      return '';\n    },\n    query: {\n      key: 'AIzaSyC0UZckU_eK8heofiWpXTUYU-IpJo0KhnI',\n      language: 'en',\n      types: '(cities)'\n    },\n    styles: {\n      textInputContainer: {\n        width: '100%',\n        padding: 0\n      },\n      description: {\n        fontWeight: 'bold'\n      },\n      predefinedPlacesDescription: {\n        color: '#1faadb'\n      }\n    },\n    currentLocation: true,\n    currentLocationLabel: \"Current location\",\n    nearbyPlacesAPI: \"GooglePlacesSearch\",\n    GoogleReverseGeocodingQuery: {},\n    GooglePlacesDetailsQuery: {\n      fields: 'formatted_address'\n    },\n    predefinedPlaces: [homePlace, workPlace],\n    debounce: 200,\n    renderLeftButton: function renderLeftButton() {\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }\n      }, \"To?\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), React.createElement(DateTime, {\n    getDate: props.getDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 3\n    }\n  }));\n}\n\nexport default GooglePlacesInput;","map":{"version":3,"sources":["C:/Users/shrey/FreightApp/components/FindPlaces.js"],"names":["React","GooglePlacesAutocomplete","DateTime","GooglePlacesInput","props","homePlace","description","geometry","location","lat","lng","workPlace","currentLocation","latitude","longitude","row","data","details","setOrigin","console","log","place_id","key","language","types","textInputContainer","width","fontWeight","predefinedPlacesDescription","color","fields","setDestination","padding","getDate"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Image, Text } from 'react-native';\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\r\nimport DateTime from 'C:/Users/shrey/FreightApp/components/DateTime.js';\r\n \r\nfunction GooglePlacesInput(props){\r\n  const homePlace = { description: 'Home', geometry: { location: { lat: 48.8152937, lng: 2.4597668 } }};\r\nconst workPlace = { description: 'Work', geometry: { location: { lat: 48.8496818, lng: 2.2940881 } }};\r\nconst currentLocation = { description: 'currentLocation', geometry: { location: { lat: props.latitude, lng: props.longitude } }}; \r\n\r\n  return (\r\n    <>\r\n    <GooglePlacesAutocomplete\r\n      placeholder='Enter Pickup Location'\r\n      minLength={2} // minimum length of text to search\r\n      autoFocus={false}\r\n      returnKeyType={'search'} // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\r\n      keyboardAppearance={'light'} // Can be left out for default keyboardAppearance https://facebook.github.io/react-native/docs/textinput.html#keyboardappearance\r\n      listViewDisplayed='auto'    // true/false/undefined\r\n      fetchDetails={true}\r\n      renderDescription={row => row.description} // custom description render\r\n      onPress={(data, details = null) => { // 'details' is provided when fetchDetails = true\r\n      props.setOrigin(data,details)\r\n        console.log(data.place_id);\r\n      }}\r\n \r\n      getDefaultValue={() => ''}\r\n \r\n      query={{\r\n        // available options: https://developers.google.com/places/web-service/autocomplete\r\n        key: 'AIzaSyC0UZckU_eK8heofiWpXTUYU-IpJo0KhnI',\r\n        language: 'en', // language of the results\r\n        types: '(cities)' // default: 'geocode'\r\n      }}\r\n \r\n      styles={{\r\n        textInputContainer: {\r\n          width: '100%'\r\n        },\r\n        description: {\r\n          fontWeight: 'bold'\r\n        },\r\n        predefinedPlacesDescription: {\r\n          color: '#1faadb'\r\n        }\r\n      }}\r\n \r\n      currentLocation={true} // Will add a 'Current location' button at the top of the predefined places list\r\n      currentLocationLabel=\"Current location\"\r\n      nearbyPlacesAPI='GooglePlacesSearch' // Which API to use: GoogleReverseGeocoding or GooglePlacesSearch\r\n      GoogleReverseGeocodingQuery={{\r\n        // available options for GoogleReverseGeocoding API : https://developers.google.com/maps/documentation/geocoding/intro\r\n      }}\r\n  \r\n      \r\n      GooglePlacesDetailsQuery={{\r\n        // available options for GooglePlacesDetails API : https://developers.google.com/places/web-service/details\r\n        fields: 'formatted_address',\r\n      }}\r\n \r\n      predefinedPlaces={[homePlace, workPlace]}\r\n \r\n      debounce={200} // debounce the requests in ms. Set to 0 to remove debounce. By default 0ms.\r\n      renderLeftButton={() => <Text>From?</Text>}\r\n    />\r\n    <GooglePlacesAutocomplete\r\n    placeholder='Enter Dropoff Location'\r\n    minLength={2} // minimum length of text to search\r\n    autoFocus={false}\r\n    returnKeyType={'search'} // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\r\n    keyboardAppearance={'light'} // Can be left out for default keyboardAppearance https://facebook.github.io/react-native/docs/textinput.html#keyboardappearance\r\n    listViewDisplayed='auto'    // true/false/undefined\r\n    fetchDetails={true}\r\n    renderDescription={row => row.description} // custom description render\r\n    onPress={(data, details = null) => { // 'details' is provided when fetchDetails = true\r\n      props.setDestination(data,details)\r\n      console.log(data.place_id);\r\n    }}\r\n\r\n    getDefaultValue={() => ''}\r\n\r\n    query={{\r\n      // available options: https://developers.google.com/places/web-service/autocomplete\r\n      key: 'AIzaSyC0UZckU_eK8heofiWpXTUYU-IpJo0KhnI',\r\n      language: 'en', // language of the results\r\n      types: '(cities)' // default: 'geocode'\r\n    }}\r\n\r\n    styles={{\r\n      textInputContainer: {\r\n        width: '100%',\r\n        padding: 0,\r\n      },\r\n      description: {\r\n        fontWeight: 'bold'\r\n      },\r\n      predefinedPlacesDescription: {\r\n        color: '#1faadb'\r\n      }\r\n    }}\r\n\r\n    currentLocation={true} // Will add a 'Current location' button at the top of the predefined places list\r\n    currentLocationLabel=\"Current location\"\r\n    nearbyPlacesAPI='GooglePlacesSearch' // Which API to use: GoogleReverseGeocoding or GooglePlacesSearch\r\n    GoogleReverseGeocodingQuery={{\r\n      // available options for GoogleReverseGeocoding API : https://developers.google.com/maps/documentation/geocoding/intro\r\n    }}\r\n\r\n    \r\n    GooglePlacesDetailsQuery={{\r\n      // available options for GooglePlacesDetails API : https://developers.google.com/places/web-service/details\r\n      fields: 'formatted_address',\r\n    }}\r\n\r\n    predefinedPlaces={[homePlace, workPlace]}\r\n\r\n    debounce={200} // debounce the requests in ms. Set to 0 to remove debounce. By default 0ms.\r\n    renderLeftButton={() => <Text>To?</Text>}\r\n  />\r\n  <DateTime getDate = {props.getDate}/>\r\n  </>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default GooglePlacesInput\r\n\r\n"]},"metadata":{},"sourceType":"module"}